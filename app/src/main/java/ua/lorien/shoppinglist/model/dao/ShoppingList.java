package ua.lorien.shoppinglist.model.dao;

import android.util.Log;

import java.util.List;
import ua.lorien.shoppinglist.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.bignerdranch.expandablerecyclerview.Model.ParentListItem;
import java.util.ArrayList;
import java.io.Serializable;
// KEEP INCLUDES END
/**
 * Entity mapped to table "SHOPPING_LIST".
 */
public class ShoppingList implements ParentListItem, Serializable {

    private Long id;
    private String name;
    private Boolean isDone;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ShoppingListDao myDao;

    private List<ShoppingListItem> items;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ShoppingList() {
    }

    public ShoppingList(Long id) {
        this.id = id;
    }

    public ShoppingList(Long id, String name, Boolean isDone) {
        this.id = id;
        this.name = name;
        this.isDone = isDone;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getShoppingListDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boolean getIsDone() {
        return isDone;
    }

    public void setIsDone(Boolean isDone) {
        this.isDone = isDone;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ShoppingListItem> getItems() {
        if (items == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ShoppingListItemDao targetDao = daoSession.getShoppingListItemDao();
            List<ShoppingListItem> itemsNew = targetDao._queryShoppingList_Items(id);
            synchronized (this) {
                if(items == null) {
                    items = itemsNew;
                }
            }
        }
        return items;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetItems() {
        items = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public int getTotalPrice() {
        int totalPrice = 0;

        if (items != null) {
            for (ShoppingListItem item : items) {
                totalPrice += item.getPrice();
            }
        }

        return totalPrice;
    }

    public int getDoneItemsCount() {
        int doneItemsCount = 0;

        if (items != null) {
            for (ShoppingListItem item : items) {
                if (item.getIsDone()) {
                    doneItemsCount++;
                }
            }
        }

        return doneItemsCount;
    }

    public int getItemsCount() {
        if (items == null) return 0;
        return items.size();
    }

    @Override
    public List<?> getChildItemList() {
        return items;
    }

    @Override
    public boolean isInitiallyExpanded() {
        return false;
    }

    public void addItem(ShoppingListItem item) {
        if (item != null) {
            if(items == null){
                //First time create list of items
                items = new ArrayList<>();
            }
            items.add(item);
        }
    }

    public void setItem(int position, ShoppingListItem item) {
        if (item != null) {
            if(items == null){
                //First time create list of items
                items = new ArrayList<>();
            }
            Log.d(getClass().getSimpleName(), "sssssssssssssssssssssss" + items.size());
            items.set(position, item);
        }
    }

    public void removeItem(int position) {
        if( position < items.size() ){
            items.remove(position);
        }
    }
    // KEEP METHODS END

}
