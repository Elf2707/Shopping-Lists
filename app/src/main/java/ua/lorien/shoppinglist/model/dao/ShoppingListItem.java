package ua.lorien.shoppinglist.model.dao;

import ua.lorien.shoppinglist.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.io.Serializable;
// KEEP INCLUDES END
/**
 * Entity mapped to table "SHOPPING_LIST_ITEM".
 */
public class ShoppingListItem implements Serializable {

    private Long id;
    private String name;
    private String description;
    private Boolean isDone;
    private String amount;
    private Double price;
    private Long shoppingListId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ShoppingListItemDao myDao;

    private ShoppingList shoppingList;
    private Long shoppingList__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ShoppingListItem() {
    }

    public ShoppingListItem(Long id) {
        this.id = id;
    }

    public ShoppingListItem(Long id, String name, String description, Boolean isDone, String amount, Double price, Long shoppingListId) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.isDone = isDone;
        this.amount = amount;
        this.price = price;
        this.shoppingListId = shoppingListId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getShoppingListItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Boolean getIsDone() {
        return isDone;
    }

    public void setIsDone(Boolean isDone) {
        this.isDone = isDone;
    }

    public String getAmount() {
        return amount;
    }

    public void setAmount(String amount) {
        this.amount = amount;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    public Long getShoppingListId() {
        return shoppingListId;
    }

    public void setShoppingListId(Long shoppingListId) {
        this.shoppingListId = shoppingListId;
    }

    /** To-one relationship, resolved on first access. */
    public ShoppingList getShoppingList() {
        Long __key = this.shoppingListId;
        if (shoppingList__resolvedKey == null || !shoppingList__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ShoppingListDao targetDao = daoSession.getShoppingListDao();
            ShoppingList shoppingListNew = targetDao.load(__key);
            synchronized (this) {
                shoppingList = shoppingListNew;
            	shoppingList__resolvedKey = __key;
            }
        }
        return shoppingList;
    }

    public void setShoppingList(ShoppingList shoppingList) {
        synchronized (this) {
            this.shoppingList = shoppingList;
            shoppingListId = shoppingList == null ? null : shoppingList.getId();
            shoppingList__resolvedKey = shoppingListId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
